/* eslint-disable */
export default async () => {
    const t = {
        ["./job/dto/job-list.dto"]: await import("./job/dto/job-list.dto"),
        ["./common/pagination/page-info.dto"]: await import("./common/pagination/page-info.dto"),
        ["./auth/dto/auth-tokens.dto"]: await import("./auth/dto/auth-tokens.dto"),
        ["./user/user.entity"]: await import("./user/user.entity"),
        ["./user/dto/delete-user-res.dto"]: await import("./user/dto/delete-user-res.dto"),
        ["./job/entities/job.entity"]: await import("./job/entities/job.entity"),
        ["./job-list/entities/job-list.entity"]: await import("./job-list/entities/job-list.entity"),
        ["./job-log/entities/job-log.entity"]: await import("./job-log/entities/job-log.entity")
    };
    return { "@nestjs/swagger": { "models": [[import("./user/dto/create-user.dto"), { "CreateUserDto": { email: { required: true, type: () => String }, password: { required: true, type: () => String }, firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String } } }], [import("./user/user.entity"), { "UserEntity": { id: { required: true, type: () => Number }, createdAt: { required: true, type: () => Date }, email: { required: true, type: () => String }, firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String, nullable: true }, role: { required: true, type: () => Object } } }], [import("./user/dto/delete-user-res.dto"), { "DeleteUserResDto": { id: { required: true, type: () => Number, description: "ID of deleted user" } } }], [import("./auth/dto/user-login-req.dto"), { "UserLoginReqDto": { email: { required: true, type: () => String }, password: { required: true, type: () => String } } }], [import("./auth/dto/auth-tokens.dto"), { "AuthTokens": { accessToken: { required: true, type: () => String }, refreshToken: { required: true, type: () => String } } }], [import("./auth/dto/auth-user.dto"), { "AuthUser": { id: { required: true, type: () => Number, description: "user id (same as sub but explicit)" }, email: { required: true, type: () => String, description: "user email" }, role: { required: true, type: () => Object, description: "user role" } } }], [import("./auth/dto/register-admin.dto"), { "RegisterAdminDto": { adminKey: { required: true, type: () => String, description: "Single use admin registration key" } } }], [import("./job/entities/job.entity"), { "JobEntity": { id: { required: true, type: () => Number, description: "ID of the Job" }, title: { required: true, type: () => String, description: "Job Title" }, company: { required: true, type: () => String, description: "Job company" }, location: { required: true, type: () => String, nullable: true, description: "Job Location" }, url: { required: true, type: () => String, nullable: true, description: "Job post URL" }, salary: { required: true, type: () => String, nullable: true, description: "Job salary" }, description: { required: true, type: () => String, nullable: true, description: "Job description" }, color: { required: true, type: () => String, nullable: true, description: "Hexadecimal color to be used in UI when displaying job content" }, jobListRank: { required: true, type: () => String, description: "Job list rank" }, jobListId: { required: true, type: () => Number, description: "Job List ID where the Job links to" }, userId: { required: true, type: () => Number, description: "ID of the User who owns this Job" } } }], [import("./job/dto/job-list.dto"), { "JobListDto": { id: { required: false, type: () => Number }, beforeJobId: { required: false, type: () => Number }, afterJobId: { required: false, type: () => Number } } }], [import("./job/dto/create-job.dto"), { "CreateJobDto": { title: { required: true, type: () => String, description: "Job Title", example: "Software Engineer" }, company: { required: true, type: () => String, description: "Job company", example: "Acme" }, location: { required: false, type: () => String, nullable: true, description: "Job Location", example: "Raleigh, NC" }, url: { required: false, type: () => String, nullable: true, description: "Job post URL" }, salary: { required: false, type: () => String, nullable: true, description: "Job salary", example: "56k" }, description: { required: false, type: () => String, nullable: true, description: "Job description" }, color: { required: false, type: () => String, nullable: true, description: "Hexadecimal color to be used in UI when displaying job content", example: "#e91e63" }, jobList: { required: true, type: () => t["./job/dto/job-list.dto"].JobListDto, description: "Parameters for assigning job list to job" } } }], [import("./job/dto/update-job.dto"), { "UpdateJobDto": {} }], [import("./common/pagination/page-info.dto"), { "PageInfo": { currentPage: { required: true, type: () => Number, description: "Current page number" }, currentPageSize: { required: true, type: () => Number, description: "Requested page size" }, currentPageCount: { required: true, type: () => Number, description: "Actual item/result count count of the current page" }, totalPageCount: { required: false, type: () => Number, description: "Total number of pages([pageTotalCount] query param must be set to `true` within your request)" }, totalCount: { required: false, type: () => Number, description: "Total item count ([pageTotalCount] query param must be set to `true` within your request)" } } }], [import("./common/pagination/page.dto"), { "Page": { data: { required: true }, pageInfo: { required: true, type: () => t["./common/pagination/page-info.dto"].PageInfo } } }], [import("./common/pagination/page-query.dto"), { "PaginatedQuery": { page: { required: true, type: () => Object, default: 1, minimum: 1 }, pageSize: { required: true, type: () => Object, default: 20 }, pageTotalCount: { required: true, type: () => Object, default: false } } }], [import("./job/dto/find-all-jobs-query.dto"), { "FindAllJobsQueryDto": { jobListId: { required: false, type: () => [Number] } } }], [import("./job-list/dto/create-job-list.dto"), { "CreateJobListDto": { label: { required: true, type: () => String, description: "Job List label to display in UI", example: "Interview" } } }], [import("./job-list/dto/update-job-list.dto"), { "UpdateJobListDto": {} }], [import("./job-list/entities/job-list.entity"), { "JobListEntity": { id: { required: true, type: () => Number, description: "Job List ID" }, label: { required: true, type: () => String, description: "Job List label" }, order: { required: true, type: () => Number, description: "Order in which Job List should be displayed in UI" }, userId: { required: true, type: () => Number, description: "ID of the user who owns Job List" } } }], [import("./admin/user/dto/find-all-users-query.dto"), { "FindAllUsersDto": {} }], [import("./job-log/entities/job-log.entity"), { "JobLogEntity": { id: { required: true, type: () => Number }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date }, content: { required: true, type: () => String }, jobId: { required: true, type: () => Number } } }], [import("./job-log/dto/create-job-log.dto"), { "CreateJobLogDto": { content: { required: true, type: () => String, description: "Log text content" }, jobId: { required: true, type: () => Number } } }], [import("./job-log/dto/update-job-log.dto"), { "UpdateJobLogDto": { content: { required: true, type: () => String, description: "Text content" } } }], [import("./job-log/dto/find-all-job-logs.dto"), { "FindAllJobLogsQueryDto": { jobId: { required: false, type: () => [Number] } } }], [import("./common/dto/api-not-found-response.dto"), { "ApiNotFoundResponse": { statusCode: { required: true }, error: { required: true, type: () => String }, messages: { required: true, type: () => [String] } } }]], "controllers": [[import("./auth/auth.controller"), { "AuthController": { "login": { description: "User Login", type: t["./auth/dto/auth-tokens.dto"].AuthTokens }, "signup": { description: "User Signup", type: t["./auth/dto/auth-tokens.dto"].AuthTokens }, "refreshTokens": { description: "Refresh Auth JWT", type: t["./auth/dto/auth-tokens.dto"].AuthTokens }, "logout": { description: "User Logout", type: Boolean }, "registerAdmin": { description: "Register admin for the first time to activate app", type: t["./user/user.entity"].UserEntity } } }], [import("./user/user.controller"), { "UserController": { "getProfile": { description: "Get user profile", type: t["./user/user.entity"].UserEntity }, "delete": { description: "Delete user", type: t["./user/dto/delete-user-res.dto"].DeleteUserResDto } } }], [import("./app.controller"), { "AppController": { "login": {} } }], [import("./job/job.controller"), { "JobController": { "create": { description: "Create a new Job", type: t["./job/entities/job.entity"].JobEntity }, "findAll": { description: "Get all Jobs" }, "findOne": { description: "Get Job by ID", type: t["./job/entities/job.entity"].JobEntity }, "update": { description: "Update Job data", type: t["./job/entities/job.entity"].JobEntity }, "remove": { description: "Delete a Job", type: t["./job/entities/job.entity"].JobEntity } } }], [import("./job-list/job-list.controller"), { "JobListController": { "create": { description: "Create a new Job List", type: t["./job-list/entities/job-list.entity"].JobListEntity }, "findAll": { description: "Get all Job Lists" }, "findOne": { description: "Get Job List by ID", type: t["./job-list/entities/job-list.entity"].JobListEntity }, "updateJobList": { description: "Update a Job List", type: t["./job-list/entities/job-list.entity"].JobListEntity }, "remove": { description: "Delete a Job List", type: t["./job-list/entities/job-list.entity"].JobListEntity } } }], [import("./admin/user/user.controller"), { "UserController": { "getAllUsers": { description: "Find all users" } } }], [import("./job-log/job-log.controller"), { "JobLogController": { "create": { type: t["./job-log/entities/job-log.entity"].JobLogEntity }, "findAll": {}, "findOne": { type: t["./job-log/entities/job-log.entity"].JobLogEntity }, "update": { type: t["./job-log/entities/job-log.entity"].JobLogEntity }, "remove": { type: t["./job-log/entities/job-log.entity"].JobLogEntity } } }]] } };
};